// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"

std::shared_ptr<OI> OI::self;
std::shared_ptr<OI> OI::getInstance() {
if (! self) {
	self=std::make_shared<OI>();
}
return self;
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
:driver(new Joystick(0))
,dA(driver.get(), kbuttonA_ID)
,dB(driver.get(), kbuttonB_ID)
,dX(driver.get(), kbuttonX_ID) //hi
,dY(driver.get(), kbuttonY_ID)
,dLB(driver.get(), kbuttonLB_ID)
,dRB(driver.get(), kbuttonRB_ID)
,dL3(driver.get(), kbuttonL3_ID)
,dR3(driver.get(), kbuttonL3_ID)
,dStart(driver.get(), kbuttonStart_ID)
,dBack(driver,get(), kbuttonBack_ID)

,coDriver(new Joystick(1))
,coA(coDriver.get(), kbuttonA_ID)
,coB(coDriver.get(), kbuttonB_ID)
,coX(coDriver.get(), kbuttonX_ID)
,coY(coDriver,get(), kbuttonY_ID)
,coLB(coDriver.get(), kbuttonLB_ID)
,coRB(coDriver.get(), kbuttonRB_ID)
,coL3(coDriver.get(), kbuttonL3_ID)
,coR3(coDriver,get(), kbuttonR3_ID)
,coStart(coDriver.get(), kbuttonStart_ID)
,coBack(coDriver.get(), kbuttonBack_ID)

,coTurretNeg90(coDriver.get(), kbuttonCoTurretNeg90_ID)
,coTurret0(coDriver.get(), kbuttoncoTurret0_ID)
,coTurret90(coDriver.get(), kbuttoncoTurret90_ID)
,coTurretMinus(coDriver.get(), kbuttobcoTurretMinus_ID)
,coTurretPlus(coDriver.get(), kbuttoncoTurretPlus_ID)

,coShooterMinus(coDriver.get(), kbuttonCoShooterMinus_ID)
,coShooterPlus(coDriver.get(), kbuttonCoShooterPlus_ID)

,coShoot(coDriver.get(), kButtonCoShoot_ID)
,coBallIntake(coDriver.get(), kbuttonCoBallIntake_ID)
,coGearScore(coDriver.get(), kbuttonCoGearScore_ID)
,coGearPickup(coDriver.get(), kbuttonCoGearPickup_ID)
,coGearToggle(coDriver.get(), kbuttonCoGearTogggle_ID)
,coBallOuttake(coDriver.get(), kbuttonCoBallOutake_ID)
,coFloorOuttake(coDriver.get(), kbuttonCoFloorOuttake_ID)
,coCancel(coDriver.get(), kbuttonCoCancel_ID)

{

}

std::shared_ptr<Joystick>OI::getDriver() {
	return driver;
}

double OI::getDriverLeftXAxis() const {
 return driver->GetRawAxis(kLeftXAxis_ID);
}

double OI::getDriverLeftYAxis() const {
 return driver->GetRawAxis(kLeftYAxis_ID);
}
double OI::getDriverRightXAxis() const {
	return driver->GetRawAxis(kRightXAxis_ID);
}
double OI::getDriverRightYAxis() const {
	return driver->GetRawAxis(kRightYAxis_ID);
}
double OI::getDriverLeftTrigger() const {
	return driver->GetRawAxis(kLeftTrigger_ID);
}
double OI::getDriverRightTrigger() const {
	return driver->GetRawAxis(kRightTrigger_ID);
}

std::shared_ptr<Joystick>OI::getCoDriver() {
	return coDriver;
}
double OI::getCoDriverLeftXAxis() const {
	return coDriver->GetRawAxis(kLeftXAxis_ID);
}
double OI::getCoDriverLeftYAxis() const {
	return coDriver->GetRawAxis(kLeftYAxis_ID);
}
double OI::getCoDriverRightXAxis() const {
	return coDriver->GetRawAxis(kRightXAxis_ID);
}
double OI::getCoDriverRightAxis() const {
	return coDriver->GetRawAxis(kRightYAxis_ID);
}
double OI::getCoDriverLeftTrigger() const {
	return coDriver->GetRawAxis(kLeftTrigger_ID);
}
double OI::getCoDriverRightTrigger() const {
	return coDriver->GetRawAxis(kRightTrigger_ID);
}

void OI::SetRumble(double amount) {
	driver->SetRumble(GenericHID::kLeftRumble, amount);
	coDriver->SetRumble(GenericHID::kLeftRumble, amount);
}




// Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // SmartDashboard Buttons
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
